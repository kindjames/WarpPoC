// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace hGem.Testing.Integration.Services.TextResources
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Developer Saves a Text Resource")]
    public partial class DeveloperSavesATextResourceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SaveTextResource.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Developer Saves a Text Resource", "As a Developer\r\nI want to be able to verify the uniqeness of new TextResource dat" +
                    "a\r\nSo that I can persist the data to the database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful Save with unique data")]
        [NUnit.Framework.CategoryAttribute("SaveTextResource")]
        [NUnit.Framework.CategoryAttribute("WiP")]
        [NUnit.Framework.CategoryAttribute("1_UniqueResourceString_UniqueIdentifierCode")]
        public virtual void SuccessfulSaveWithUniqueData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful Save with unique data", new string[] {
                        "SaveTextResource",
                        "WiP",
                        "1_UniqueResourceString_UniqueIdentifierCode"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I have TextResource data to persist to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
  testRunner.And("the ResourceString is unique", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("the ResourceIdentifierCode is unique", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("the ResourceString data has been checked for uniqueness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
  testRunner.And("the CheckIsResourceStringUniqueQuery returns true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.Then("the ResourceIdentifier data is checked for uniqueness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
  testRunner.And("the CheckIsResourceIdentifierCodeUniqueQuery returns true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("the TextResourceService initialises a SaveTextResourceCommand from the SaveTextRe" +
                    "sourceDto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
  testRunner.And("the TextResourceIdentifier data is persisted to the TextResourceIdentifier table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
  testRunner.And("the TextResource data is persisted to the TextResource table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.Then("SaveChanges() is called on the model", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failed Save with unique ResourceString and a duplicate ResourceIdentifierCode")]
        [NUnit.Framework.CategoryAttribute("2_UniqueResourceString_DuplicateResourceIdentifierCode")]
        public virtual void FailedSaveWithUniqueResourceStringAndADuplicateResourceIdentifierCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed Save with unique ResourceString and a duplicate ResourceIdentifierCode", new string[] {
                        "2_UniqueResourceString_DuplicateResourceIdentifierCode"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I have TextResource data to persist to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.And("the Resource string is unique", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("the ResourceIdentifierCode is duplicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("the ResourceString data has been checked for uniqueness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
  testRunner.And("the CheckIsResourceStringUniqueQuery returns true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("the ResourceIdentifier data is checked for uniqueness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.When("the CheckIsResourceIdentifierCodeUniqueQuery returns false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("run a GetResourceIdentifierCodeDataQuery against the duplicated ResourceIdentifie" +
                    "rCode string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
  testRunner.And("returns the duplicate ResourceIdentifierCode data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.Then("runs the GetAssociatedTextResourceDataQuery using the duplicate ResourceIdentifie" +
                    "rCodeId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
  testRunner.And("returns associated TextResource data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("the TextResourceService initialises a SaveTextResourceResponseDto with both assoc" +
                    "iated data query results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
  testRunner.And("maps the SaveResourceResponseDto to a SaveResourceResponseViewModel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
  testRunner.And("returns the mapped Viewmodel to the TextResourceController SaveTextResource metho" +
                    "d", @"#@3_UniqueResourceString_DifferentResourceIdentifierCode
#Scenario: Failed Save

@_DuplicateResourceString_UniqueResourceIdentifier
Scenario: Unsuccessful Save with duplicate ResourceString and a unique ResourceIdentifierCode
	Given I have TextResource data to persist to the database
		And the Resource string is duplicated
		And the ResourceIdentifierCode is unique
	When the ResourceString has been successfully checked for uniqueness
		And the query returns false
	Then the TextResourceService creates a SaveResourceResponseDto
		And runs a query for associated ResourceIdentifier data
	Then populates the SaveResourceResponseDto with the result of the associated data query
		And maps the SaveResourceResponseDto to a SaveResourceResponseViewModel
	Then returns the mapped Viewmodel

#Scenario: Unsuccessful Save with unique TextResource string and a duplicate ResourceIdentifierCode


#@WorstCaseScenario
#Scenario: Unsuccessful Save with a duplicate TextResource string and a duplicate ResourceIdentifierCode

#@ignore", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
